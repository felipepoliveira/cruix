$responsiveUnits : xsm sm md lg xlg;

@mixin _rule($selector, $props, $values){

    $valuesMatchProperties : length($values) == length($props);
    $value : $values;

    #{$selector}{
        @each $prop in $props{

            @if $valuesMatchProperties{
                $value : nth($values, index($props, $prop));
            }
            

            #{$prop} : $value;
        }
    }
}

@mixin rule($selector, $props, $values){
    @include _rule($selector, $props, $values);
    @include _rule(unquote("#{$selector}-oc > *") , $props, $values);
}

@mixin responsiveStyles($selector, $props, $values){

    //@include rule($selector, $props, $values);

    //Get each unit
    @each $responsiveUnit in $responsiveUnits{
        $i : index($responsiveUnits, $responsiveUnit);
        $value : nth($values, index($responsiveUnits, $responsiveUnit));

        @include rule(unquote("#{$selector}-#{$responsiveUnit}"), $props, $value);
    }
}

@mixin responsiveStylesBoxSizing($prefix, $prop, $values){
    @include responsiveStyles($prefix, $prop, $values);
    @include responsiveStyles(unquote("#{$prefix}-t"), unquote("#{$prop}-top"), $values);
    @include responsiveStyles(unquote("#{$prefix}-r"), unquote("#{$prop}-right"), $values);
    @include responsiveStyles(unquote("#{$prefix}-b"), unquote("#{$prop}-bottom"), $values);
    @include responsiveStyles(unquote("#{$prefix}-l"), unquote("#{$prop}-left"), $values);
    @include responsiveStyles(unquote("#{$prefix}-x"), unquote("#{$prop}-left") unquote("#{$prop}-right"), $values);
    @include responsiveStyles(unquote("#{$prefix}-y"), unquote("#{$prop}-top") unquote("#{$prop}-bottom"), $values);
}

@mixin responsiveStylesRelativeSizing($selector, $prop){
    @each $relativeUnit in $relativeUnits{
        @include rule(unquote("#{$selector}-#{$relativeUnit}"), $prop, unquote("#{$relativeUnit}%"));
        @include rule(unquote("#{$selector}-#{$relativeUnit}-vw"), $prop, unquote("#{$relativeUnit}vw"));
    }
}